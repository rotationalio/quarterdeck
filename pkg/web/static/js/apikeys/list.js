import { isRequestFor, isRequestMatch } from '../htmx/helpers.js';
import { activateCopyButtons } from '../common/clipboard.js';

/*
When the document is ready, initialize the DataTable for the API keys list.
*/
$(document).ready(function() {
  $("#apikeys-table").DataTable({
    destroy: true,
    responsive: true,
    columns: [
      { data: "description" },
      { data: "client_id", className: "font-monospace text-muted" },
      {
        data: "created",
        render: DataTable.render.date('MMM D, YYYY'),
        searchable: false,
      },
      {
        data: "last_seen",
        render: function(data, type, row, meta) {
          if (data) {
            return moment(data).fromNow();
          }
          return `<span class="text-warning"><i class="fas fa-fw fa-exclamation-triangle"></i> Unused</span>`;
        },
        defaultContent: `<span class="text-warning"><i class="fas fa-fw fa-exclamation-triangle"></i> Unused</span>`,
        searchable: false,
      },
      {
        data: function(data, type, row, meta) {
          return `
            <div class="dropdown">
              <a href="#" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-fw fa-ellipsis-v"></i>
              </a>
              <div class="dropdown-menu dropdown-menu-end" data-bs-popper="static">
                <a href="#" class="dropdown-item" hx-get="/v1/apikeys/${data.id}" hx-trigger="click" hx-target="#apiKeyDetailModal" hx-swap="innerHTML">
                  <i class="fas fa-fw fa-info-circle me-1"></i> View Details
                </a>
                <a href="#" class="dropdown-item" hx-get="/v1/apikeys/${data.id}/edit" hx-trigger="click" hx-target="#apiKeyEditModal" hx-swap="innerHTML">
                  <i class="fas fa-fw fa-edit me-1"></i> Edit
                </a>
                <a href="#" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deleteAPIKeyModal" data-bs-key-id="${data.id}" data-bs-client-id="${data.client_id}" data-bs-description="${data.description}">
                  <i class="fas fa-fw fa-trash-alt me-1"></i> Revoke
                </a>
              </div>
            </div>
          `;
        },
        className: "text-end",
        orderable: false,
        searchable: false,
      }
    ],
    ajax: {
      url: "/v1/apikeys",
      dataSrc: "apikeys",
      error: function (xhr, error, thrown) {
        const message = xhr.responseJSON?.error;
        notyf.error("Error: " + message  || 'An unknown error occurred');
        console.error(xhr.responseJSON);
      },
    },
  });
});

/*
Post-event handling after htmx has settled the DOM.
*/
document.body.addEventListener("htmx:afterSettle", function(e) {
  /*
  After creating an apikey, close the create apikey modal and display the apikey
  created modal generated by the htmx request (activating the new DOM elements).
  */
  if(isRequestFor(e, "/v1/apikeys", "post")) {
    // Close and reset the create API key modal, then open the created modal.
    const createAPIKeyForm = document.getElementById("createAPIKeyForm");
    createAPIKeyForm.reset();

    const createAPIKeyModal = bootstrap.Modal.getInstance(document.getElementById("createAPIKeyModal"));
    createAPIKeyModal.hide();

    activateCopyButtons();

    const apiKeyCreatedModal = new bootstrap.Modal(document.getElementById("apiKeyCreatedModal"), {});
    apiKeyCreatedModal.show();

    return;
  }

  // After fetching the preview form, display the apikeyEditModal.
  if (isRequestMatch(e, /^\/v1\/apikeys\/[0-7][0-9A-HJKMNP-TV-Z]{25}\/edit$/gm, "get")) {
    const apiKeyEditModal = new bootstrap.Modal("#apiKeyEditModal", {});
    apiKeyEditModal.show();
    return;
  }

  // After fetching the apikey detail, display the apiKeyDetailModal.
  if (isRequestMatch(e, /^\/v1\/apikeys\/[0-7][0-9A-HJKMNP-TV-Z]{25}$/gm, "get")) {
    const apiKeyEditModal = new bootstrap.Modal("#apiKeyDetailModal", {});
    apiKeyEditModal.show();
    return;
  }
});

/*
Post-event handling when the apikeys-updated event is fired.
*/
document.body.addEventListener("apikeys-updated", function(e) {
  // Reload the data in the table.
  const table = $("#apikeys-table").DataTable();
  table.ajax.reload();

  // If the event was fired by the delete button, close the delete modal.
  const elt = e.detail?.elt;
  if (elt) {
    if (elt.id === 'deleteBtn') {
      const confirmRevokeModal = bootstrap.Modal.getInstance(document.getElementById("deleteAPIKeyModal"));
      confirmRevokeModal.hide();
    }
  }
});


/*
When the apikey created confirmation modal is closed, remove all of the HTML from it.
This has the effect of removing the client secret from the DOM, which feels like a
prudent thing to do and prevent XSS.
*/
const apiKeyCreatedModal = document.getElementById('apiKeyCreatedModal');
if (apiKeyCreatedModal) {
  apiKeyCreatedModal.addEventListener('hidden.bs.modal', function() {
    apiKeyCreatedModal.innerHTML = '';
  });
}

/*
When the revoke button is pressed in the list, show the modal and populate the modal
contents with the data attributes from the row in the table. When the modal is hidden,
make sure the modal is reset to its previous ready state.
*/
const deleteAPIKeyModal = document.getElementById('deleteAPIKeyModal');
if (deleteAPIKeyModal) {
  deleteAPIKeyModal.addEventListener('show.bs.modal', function(event) {
    const button = event.relatedTarget;
    deleteAPIKeyModal.querySelector("#clientID").value = button.dataset.bsClientId;
    deleteAPIKeyModal.querySelector("#description").value = button.dataset.bsDescription;

    const deleteBtn = deleteAPIKeyModal.querySelector("#deleteBtn")
    deleteBtn.setAttribute("hx-delete", "/v1/apikeys/" + button.dataset.bsKeyId);
    htmx.process(deleteBtn);
  });

  deleteAPIKeyModal.addEventListener('hidden.bs.modal', function(event) {
    deleteAPIKeyModal.querySelector("#clientID").value = "";
    deleteAPIKeyModal.querySelector("#description").value = "";

    const deleteBtn = deleteAPIKeyModal.querySelector("#deleteBtn")
    deleteBtn.removeAttribute("hx-delete");
    htmx.process(deleteBtn);
  });
}
